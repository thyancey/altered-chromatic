{"version":3,"sources":["themes/index.ts","scenes/keyboard/instrument.tsx","components/musicbox.tsx","components/mididata.js","scenes/keyboard/scalegroups.tsx","scenes/keyboard/scales.tsx","scenes/keyboard/index.tsx","scenes/about/index.tsx","scenes/main/index.tsx","examples/counter/counterAPI.ts","examples/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx","utils/music.ts","scenes/keyboard/slice.ts","app/hooks.ts"],"names":["createGlobalStyle","getColor","colorId","store","colors","black","grey","grey_light","white","blue","green","yellow","red","purple","shadows","z1","z2","z3","breakpoints","mobile_tiny","mobile_medium","mobile_large","tablet","desktop","ScContainer","styled","div","ScInstrument","ScKeyboardBaseKey","p","scaleStatus","css","ScKeyboardKey","ScAccidentalKeyboardKey","keyStyle","Instrument","keyboardKeys","useAppSelector","selectKeyboardKeys","dispatch","useAppDispatch","onClick","e","noteObj","ctrlKey","setActiveNote","octaveNote","global","globalMidiHandler","midiNote","midiInstrument","volume","map","type","note","idx","midiSounds","MIDI_INSTRUMENT_DATA","midiDataJSON","MusicBox","useEffect","instrumentId","foundInstrument","defaultInstrument","instruments","id","cacheInstrument","midiId","notes","playChordNow","playMidiNotes","style","ref","appElementName","MIDI_DATA","ScScaleNote","li","ScScaleGroup","ScScaleLabel","isActive","ScaleGroups","allScales","selectAllMajorScales","activeScale","getActiveScale","activeNote","getActiveNote","scaleObj","clickedId","setActiveScale","split","label","octaveNotes","ScScales","Scales","Keyboard","About","ScHeader","ScStage","ScCopyright","a","Main","useState","collapsed","setCollapsed","pages","route","text","element","className","i","to","path","href","target","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","configureStore","reducer","counter","counterReducer","keyboard","keyboardReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","NOTES","SPECIAL_ACCIDENTALS","MIDI_NOTE_REF","SCALES","intervals","getArrayValueAtRelativeIndex","array","length","getNotesInScale","rootNote","scaleKey","wrapRootNote","noteIdx","findIndex","n","scale","curIdx","scaleNotes","interval","transformScaleNotesToOctaveNotes","scaleNoteNames","startOctave","lastNoteIdx","curOctave","snn","thisNoteIdx","nn","getOctaveNotesInScale","rootOctaveNote","notePieces","parseInt","getScaleObject","getAllOctaveNotesBetween","startOctaveNote","endOctaveNote","toIdx","startPieces","endPieces","startNote","startNoteIdx","indexOf","noteNames","minOctave","maxOctave","push","transformNotesToOctaveNotes","_","indexOfEnd","slice","convertOctaveNoteToMidiId","delta","firstOctaveNote","secondOctaveNote","firstPieces","secondPieces","firstIdx","firstOctave","secondIdx","getOctaveNoteDelta","PIANO_RANGE","keyboardSlice","selectActiveScale","createSelector","Object","keys","getScaleStatus","includes","activeScaleObj","noteLabel","useDispatch","useSelector"],"mappings":"kLAEeA,gBAAf,kxBAyDO,IAKMC,EAAW,SAACC,GACvB,OAAOC,EAAMC,OAAOF,IA+CTC,EAAoB,CAC/BC,OA5Ba,CACbC,MAAO,UACPC,KAAM,UACNC,WAAY,UACZC,MAAO,UACPC,KAAM,UACNC,MAAO,UACPC,OAAQ,UACRC,IAAK,UACLC,OAAQ,WAoBRC,QAnCc,CACdC,GAAI,+CACJC,GAAI,+CACJC,GAAI,2CAiCJC,YAjBkB,CAClBC,YAAa,QACbC,cAAe,QACfC,aAAc,QACdC,OAAQ,QACRC,QAAS,Y,uJCxFEC,EAAcC,IAAOC,IAAV,oEAKlBC,EAAeF,IAAOC,IAAV,kKAEIzB,YAAS,QACRA,YAAS,UAUnB2B,EAAoBH,IAAOC,IAAV,4CAC1B,SAAAG,GAAC,MAAsB,SAAlBA,EAAEC,aAA0BC,YAA5B,2DACiB9B,YAAS,WAG/B,SAAA4B,GAAC,MAAsB,UAAlBA,EAAEC,aAA2BC,YAA7B,4DACkB9B,YAAS,WAIvB+B,EAAgBP,YAAOG,EAAPH,CAAH,sWAOJxB,YAAS,SAIPA,YAAS,UAepBgC,EAA0BR,YAAOG,EAAPH,CAAH,gdAQhC,SAAAI,GAAC,OAAIA,EAAEK,SAAWH,YAAb,yDACe9B,YAAS,UAC3B8B,YAFG,yDAGe9B,YAAS,iBAGtBA,YAAS,SAEsBA,YAAS,QAG3BA,YAAS,SACSA,YAAS,SAY5C,SAASkC,IACd,IAAMC,EAAeC,YAAeC,KAC9BC,EAAWC,cAEXC,EAAU,SAACC,EAAOC,GACnBD,EAAEE,SACHL,EAASM,YAAcF,EAAQG,aAIjCC,EAAOC,mBAAqBD,EAAOC,kBAAkB,CAACL,EAAQM,YAGhE,OACE,eAACzB,EAAD,WACE,cAAC,IAAD,CAAU0B,eAAgB,QAASC,OAAQ,IAC3C,cAACxB,EAAD,UACGS,EAAagB,KAAI,SAAAT,GAChB,MAAoB,eAAjBA,EAAQU,KAEP,cAACpB,EAAD,CAEEQ,QAAS,SAAAC,GAAC,OAAID,EAAQC,EAAGC,IACzBT,SAAUS,EAAQT,SAClBJ,YAAaa,EAAQb,YAJvB,SAME,+BAAOa,EAAQW,QALVX,EAAQY,KAUf,cAACvB,EAAD,CAEEF,YAAaa,EAAQb,YACrBW,QAAS,SAAAC,GAAC,OAAID,EAAQC,EAAGC,IAH3B,SAKE,+BAAOA,EAAQW,QAJVX,EAAQY,gB,qGC7GzBC,E,+CATEC,EAAuBC,IAkBtB,SAASC,EAAT,GAAsD,IAAlCT,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,OAQzC,OAPAS,qBAAU,WACR,IAlBoBC,EAkBdC,IAlBcD,EAkBmBX,KAhBvCW,EAAeJ,EAAqBM,mBAE/B,2BAAKN,EAAqBO,YAAYH,IAA7C,IAA4DI,GAAIJ,KAe9DL,EAAWU,gBAAgBJ,EAAgBK,QAE1CpB,EAAeC,kBAAoB,SAACoB,GAAD,OAblB,SAACA,EAAiBD,GACtCX,EAAWa,aAAaF,EAAQC,EAAO,KAYoBE,CAAcF,EAAON,EAAgBK,WAC7F,CAACjB,EAAgBC,IAGlB,qBAAKoB,MAAO,CAAC,QAAU,QAAvB,SACE,cAAC,IAAD,CAAYC,IAAK,SAACA,GAAD,OAAehB,EAAagB,GAAMC,eAAe,c,kDC7BzDC,IAdG,CAChB,kBAAqB,QACrB,YAAc,CACZ,MAAS,CACP,OAAU,EACV,MAAS,SAEX,UAAa,CACX,OAAU,GACV,MAAS,gB,2KCEFlD,EAAcC,IAAOC,IAAV,kHACFzB,YAAS,WAQlB0E,EAAclD,IAAOmD,GAAV,0FAMXC,EAAepD,IAAOC,IAAV,gDAMZoD,EAAerD,IAAOI,EAAV,iHAOrB,SAAAA,GAAC,OAAIA,EAAEkD,UAAYhD,YAAd,6CACI9B,YAAS,aAIf,SAAS+E,IACd,IAAMC,EAAY5C,YAAe6C,KAC3BC,EAAc9C,YAAe+C,KAC7BC,EAAahD,YAAeiD,KAC5B/C,EAAWC,cACjB,IAAIyC,EAAW,OAAO,KAMtB,OACE,cAACzD,EAAD,UACGyD,EAAU7B,KAAI,SAACmC,EAAUhC,GAAX,OACb,eAACsB,EAAD,WACE,cAACC,EAAD,CACEC,SAAUQ,EAAStB,KAAOkB,EAC1B1C,QAAS,SAAAC,GAAC,OAVI8C,EAUWD,EAAStB,QAT1C1B,EAASkD,YAAeD,IADV,IAAQA,GAQhB,0BAIMH,QAJN,IAIMA,OAJN,EAIMA,EAAYK,MAAM,KAAK,GAJ7B,YAImCH,EAASI,MAJ5C,OAMA,6BACGJ,EAASK,YAAYxC,KAAI,SAAAN,GAAU,OAClC,cAAC6B,EAAD,UACE,+BAAO7B,EAAW4C,MAAM,KAAK,MADb5C,UATLyC,EAAStB,SCjD7B,I,EAAMzC,EAAcC,IAAOC,IAAV,wKAkBXmE,GAJiBpE,IAAOC,IAAV,0CAChBzB,YAAS,eAGIwB,IAAOC,IAAV,qHACCzB,YAAS,YAQxB,SAAS6F,IACd,IAAMT,EAAahD,YAAeiD,KAClC,OAAID,EAGF,eAAC,EAAD,WACE,eAACQ,EAAD,WACE,2CAAYR,EAAWK,MAAM,KAAK,MAClC,iDAAkBL,QAEpB,eAACQ,EAAD,WACE,6BAAK,WACL,4BAAI,2CACJ,cAACb,EAAD,UAXiB,KCjClB,I,EAAMxD,EAAcC,IAAOC,IAAV,+QAMFzB,YAAS,QAOlBA,YAAS,SAITA,YAAS,eAKf,SAAS8F,IACd,OACE,eAAC,EAAD,WACE,6BAAK,uBACL,4BAAI,4CACJ,cAAC,IAAD,IACA,cAACD,EAAD,OC9BC,IAAMtE,EAAcC,IAAOC,IAAV,mHACbzB,YAAS,SAKPA,YAAS,QAIf,SAAS+F,IACd,OACE,eAAC,EAAD,WACE,yDACA,kE,2BCFOC,GARiBxE,IAAOC,IAAV,kJACLzB,YAAS,QACRA,YAAS,UAMRwB,IAAOC,IAAV,kiBAQSzB,YAAS,QAiBxBA,YAAS,YAMXiG,EAAUzE,IAAOC,IAAV,oIAUPyE,EAAc1E,IAAO2E,EAAV,+NAIbnG,YAAS,SAITA,YAAS,QAEPA,YAAS,QAITA,YAAS,WAwCPoG,MApCf,WAAiB,IAAD,EACsBC,oBAAS,GAD/B,mBACNC,EADM,KACKC,EADL,KAERC,EAAQ,CACZ,CACEC,MAAO,IACPC,KAAM,WACNC,QAAS,cAACb,EAAD,KAEX,CACEW,MAAO,SACPC,KAAM,QACNC,QAAS,cAACZ,EAAD,MAIb,OACE,eAAC,IAAD,WACE,cAACC,EAAD,CAAUY,UAAYN,EAAY,YAAc,GAAI9D,QAAS,kBAAM+D,GAAcD,IAAjF,SACGE,EAAMrD,KAAI,SAACvB,EAAGiF,GAAJ,OACT,cAAC,IAAD,CAAcC,GAAIlF,EAAE6E,MAAOG,UAAU,cAArC,SACE,6BAAKhF,EAAE8E,QADEG,QAKf,eAACZ,EAAD,WACE,cAAC,IAAD,UACGO,EAAMrD,KAAI,SAACvB,EAAGiF,GAAJ,OACT,cAAC,IAAD,CAAeE,KAAMnF,EAAE6E,MAAOE,QAAS/E,EAAE+E,SAA7BE,QAGhB,cAACX,EAAD,CAAac,KAAK,0BAA0BC,OAAO,SAAnD,SAA6D,gC,iCCvG9D,SAASC,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAA0B,SAACC,GAAD,OACnCC,YAAW,kBAAMD,EAAQ,CAAEE,KAAMJ,MAAW,QCMhD,IAUaK,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAON,GAAP,eAAAhB,EAAA,sEACyBe,EAAWC,GADpC,cACQO,EADR,yBAGSA,EAASH,MAHlB,2CAF4C,uDASjCI,EAAeC,YAAY,CACtCC,KAAM,UACNC,aArBiC,CACjCC,MAAO,EACPC,OAAQ,QAqBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMJ,OAAS,GAEjBK,UAAW,SAACD,GACVA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQlB,EAAemB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQlB,EAAeoB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,c,GAK6BZ,EAAakB,QAmBzDlB,I,GAnBAO,U,GAAWE,U,GAAWC,kBAmBtBV,EAAf,SC7EazH,GAAQ4I,YAAe,CAClCC,QAAS,CACPC,QAASC,GACTC,SAAUC,O,SCKMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,KAAD,CAAUzJ,MAAOA,GAAjB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,SAGJ0J,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,uQE/GfC,EAAoB,CAAE,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,MAClFC,EAAkC,CAAE,KAAM,KAAM,MAChDC,EACC,MADDA,EAEL,GAGKC,EAAoB,CAC/B,OAAU,CACRjF,MAAO,iBACPkF,UAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAE1B,OAAU,CACRlF,MAAO,SACPkF,UAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAE1B,SAAY,CACVlF,MAAO,WACPkF,UAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAE1B,OAAU,CACRlF,MAAO,SACPkF,UAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAE1B,WAAc,CACZlF,MAAO,aACPkF,UAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAE1B,QAAW,CACTlF,MAAO,kBACPkF,UAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAE1B,QAAW,CACTlF,MAAO,UACPkF,UAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAQfC,EAA+B,SAACC,EAAcxH,GAAf,OAA+BwH,EAAMxH,EAAMwH,EAAMC,SAEhFC,EAAkB,SAACC,EAAkBC,GAA4C,IAA1BC,EAAyB,wDACrFC,EAAUZ,EAAMa,WAAU,SAAAC,GAAC,OAAIA,IAAML,KACrCM,EAAQZ,EAAOO,GACrB,IAAgB,IAAbE,EAED,OADAd,QAAQD,MAAR,iCAAwCY,EAAxC,MACO,GAET,IAAIM,EAEF,OADAjB,QAAQD,MAAR,kCAAyCa,EAAzC,MACO,GAGT,IAAIM,EAASJ,EACPK,EAAaF,EAAMX,UAAUzH,KAAI,SAACuI,EAAUpI,GAChD,IAAMD,EAAOwH,EAA6BL,EAAOgB,GAEjD,OADAA,GAAUE,EACHrI,KAGT,OAAQ8H,EAAD,sBAAiCM,GAAjC,CAA6CA,EAAW,KAAxCA,GAmCZE,EAAmC,SAACC,EAA4BC,GAC3E,IAAIC,EAActB,EAAMa,WAAU,SAAAC,GAAC,OAAIA,IAAMM,EAAe,MACxDG,EAAYF,EAEhB,OAAOD,EAAezI,KAAI,SAAA6I,GACxB,IAAMC,EAAczB,EAAMa,WAAU,SAAAa,GAAE,OAAIA,IAAOF,KAMjD,OALGC,EAAcH,GACfC,IAEFD,EAAcG,EAER,GAAN,OAAUD,EAAV,YAAiBD,OASRI,EAAwB,SAACC,EAAwBlB,GAA4C,IAA1BC,EAAyB,wDACjGkB,EAAaD,EAAe3G,MAAM,KAClCgG,EAAaT,EAAgBqB,EAAW,GAAInB,EAAUC,GAE5D,OAAOQ,EAAiCF,EAAYa,SAASD,EAAW,MAG7DE,EAAiB,SAACH,EAAwBlB,GAGrD,MAAO,CACLlH,GAAIkH,EACJxF,MAJeiF,EAAOO,GAINxF,MAChBC,YAAawG,EAAsBC,EAAgBlB,GAAU,KASpDsB,EAA2B,SAACC,EAAyBC,GAChE,IAvG0B5B,EAAc6B,EAuGlCC,EAAcH,EAAgBhH,MAAM,KACpCoH,EAAYH,EAAcjH,MAAM,KAEhCqH,EAAYF,EAAY,GACxBG,EAAevC,EAAMwC,QAAQF,GAG7BnH,EA5EmC,SAACsH,GAK1C,IALmG,IAAlCC,EAAiC,uDAArB,EAAGC,EAAkB,uDAAN,EACxFxH,EAAc,GACdmG,EAActB,EAAMa,WAAU,SAAAC,GAAC,OAAIA,IAAM2B,EAAU,MACnDlB,EAAYmB,EAEVnB,GAAaoB,GACjB,IAD4B,IAAD,WACnBtG,GACN,IAAMoF,EAAczB,EAAMa,WAAU,SAAAa,GAAE,OAAIA,IAAOe,EAAUpG,MAC3D,GAAGoF,EAAcH,KACfC,EACeoB,EAAW,cAE5BrB,EAAcG,EACdtG,EAAYyH,KAAZ,UAAoBH,EAAUpG,GAA9B,YAAoCkF,KAP9BlF,EAAI,EAAGA,EAAIoG,EAAUlC,OAAQlE,IAAI,gBAAjCA,GAIsB,MAOhC,OAAOlB,EA2Da0H,EA9GoBV,EA4GJI,GA5GVjC,EA4GGN,GA3GhBrH,KAAI,SAACmK,EAAGhK,GAAJ,OAAYwH,GAAOxH,EAAMqJ,GAAS7B,EAAMC,YA6GCuB,SAASM,EAAY,IAAKN,SAASO,EAAU,KACjGU,EAAa5H,EAAYqH,QAAQN,GACvC,OAAO/G,EAAY6H,MAAM,EAAGD,EAAa,IAqB9BE,EAA4B,SAAC5K,GACxC,IAAM6K,EAlB0B,SAACC,EAAyBC,GAC1D,IAAMC,EAAcF,EAAgBlI,MAAM,KACpCqI,EAAeF,EAAiBnI,MAAM,KAEtCsI,EAAWvD,EAAMwC,QAAQa,EAAY,IACrCG,EAAc1B,SAASuB,EAAY,IACnCI,EAAYzD,EAAMwC,QAAQc,EAAa,IAO7C,OANqBxB,SAASwB,EAAa,IAENE,GAAexD,EAAMO,QACxCkD,EAAYF,GAQhBG,CAAmBxD,EAA0B7H,GAC3D,OAAO6H,EAAqBgD,GC9LxBS,EAAc,CAAC,MAAO,OAEfC,EAAgBxG,YAAY,CACvCC,KAAM,WACNC,aATkC,CAClC1C,WAAY,KACZF,YAAa,MASb+C,SAAU,CACRrF,cAAe,SAACuF,EAAOG,GACrBH,EAAM/C,WAAakD,EAAOC,SAE5B/C,eAAgB,SAAC2C,EAAOG,GACnBH,EAAMjD,cAAgBoD,EAAOC,QAC9BJ,EAAMjD,YAAc,KAEpBiD,EAAMjD,YAAcoD,EAAOC,Y,EAMc6F,EAAcvF,QAAhDjG,E,EAAAA,cAAe4C,E,EAAAA,eAEjBH,EAAgB,SAAC8C,GAAD,OAAsBA,EAAMe,SAAS9D,YACrDD,EAAiB,SAACgD,GAAD,OAAsBA,EAAMe,SAAShE,aAEtDmJ,EAAoBC,YAC/B,CAACnJ,EAAgBE,IACjB,SAACH,EAAaE,GACZ,OAAIA,GAAeF,EAEZqH,EAAenH,EAAYF,GAFK,QAM9BD,EAAuBqJ,YAClC,CAACjJ,IACD,SAACD,GACC,OAAIA,EAEGmJ,OAAOC,KAAK7D,GAAQxH,KAAI,SAAA+H,GAC7B,OAAOqB,EAAenH,EAAY8F,MAHb,QAQduD,EAAiB,SAAC5L,EAAoB4I,GACjD,OAAIA,EAAWiD,SAAS7L,GAErBA,IAAe4I,EAAW,IAAM5I,IAAe4I,EAAWA,EAAWV,OAAS,GACxE,OAEF,QALqC,YAQjC1I,EAAqBiM,YAChC,CAACD,IACD,SAACM,GAGC,OADoBnC,EAAyB2B,EAAY,GAAIA,EAAY,IACtDhL,KAAI,SAACN,EAAYS,GAClC,IAAMsL,EAAY/L,EAAW4C,MAAM,KAAK,GACxC,MAAO,CACLpC,KAAMuL,EACN/L,WAAYA,EACZZ,SAAUwI,EAAoBiE,SAASE,GACvC5L,SAAUyK,EAA0B5K,GACpChB,YAAa8M,EAAiBF,EAAe5L,EAAY8L,EAAehJ,aAAe,WACvFvC,KAAMwL,EAAUF,SAAS,KAAO,aAAe,SAC/CpL,aAMO8K,MAAf,S,+BCxFA,gFAIa7L,EAAiB,kBAAMsM,eACvBzM,EAAkD0M,M","file":"static/js/main.2e5008f4.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\"\r\n\r\nexport default createGlobalStyle`\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    outline:0;\r\n    box-sizing:border-box;\r\n  }\r\n  #root{\r\n    margin:0 auto;\r\n  }\r\n  h1, h2, h3, h4{\r\n    font-family: 'Bevan', cursive;\r\n  }\r\n  a, p, span, h5, h6{\r\n    font-family: 'Cabin', sans-serif;\r\n  }\r\n  h1{\r\n    font-size: 5rem;\r\n  }\r\n  h2{\r\n    font-size: 4rem;\r\n  }\r\n  h3{\r\n    font-size: 3.5rem;\r\n  }\r\n  h4{\r\n    font-size: 2.5rem;\r\n  }\r\n  h5{\r\n    font-size: 2rem;\r\n  }\r\n  p, span{\r\n    font-size:2rem;\r\n  }\r\n\r\n  html{\r\n    font-size: 62.5%;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    font-family: 'Cabin', sans-serif;\r\n    background-color: black;\r\n  }\r\n  \r\n  code {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n  }\r\n`\r\n\r\n/*\r\nexport const mixinFontFamily = (style) => {\r\n  switch(style){\r\n    case 'details' : return css`font-family: 'Roboto', sans-serif`;\r\n    case 'display': return css`font-family: 'Bevan', cursive`;\r\n    default: return css`font-family: 'Roboto', sans-serif`;\r\n  }\r\n}\r\n*/\r\nexport const listColors = () => {\r\n  return Object.keys(store.colors);\r\n}\r\n\r\n\r\nexport const getColor = (colorId: tColor) => {\r\n  return store.colors[colorId] as CssString; \r\n}\r\n\r\nexport const getShadow = (shadowId: tShadow) => {\r\n  return store.shadows[shadowId] as CssString;\r\n}\r\n\r\nexport const getBreakpoint = (breakpointId: tBreakpoint) => {\r\n  return store.breakpoints[breakpointId] as CssString;\r\n}\r\n\r\ntype CssString = string;\r\n\r\ntype tShadow = 'z1' | 'z2' | 'z3';\r\nconst shadows = {\r\n  z1: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.16)',\r\n  z2: '-0.1rem 0.1rem .25rem .1rem rgba(0,0,0,0.36)',\r\n  z3: '-.2rem .5rem 1rem .2rem rgba(0,0,0,.36)'\r\n}\r\ntype tColor = 'black' | 'grey' | 'grey_light' | 'white' | 'blue' | 'green' | 'yellow' | 'red' | 'purple';\r\nconst colors = {\r\n  black: '#000000',\r\n  grey: '#373737',\r\n  grey_light: '#A39F8E',\r\n  white: '#fef8dd',\r\n  blue: '#1fb9f3',\r\n  green: '#51f249',\r\n  yellow: '#fff249',\r\n  red: '#F55658',\r\n  purple: '#6b1ff3'\r\n}\r\n\r\ntype tBreakpoint = 'mobile_tiny' | 'mobile_medium' | 'mobile_large' | 'tablet' | 'desktop';\r\nconst breakpoints = {\r\n  mobile_tiny: '300px',\r\n  mobile_medium: '400px',\r\n  mobile_large: '500px',\r\n  tablet: '768px',\r\n  desktop: '1024px'\r\n}\r\n\r\ntype ThemeStore = {\r\n  colors: typeof colors,\r\n  shadows: typeof shadows,\r\n  breakpoints: typeof breakpoints\r\n}\r\n\r\nexport const store: ThemeStore = {\r\n  colors: colors,\r\n  shadows: shadows,\r\n  breakpoints: breakpoints\r\n}\r\n","import styled, { css } from 'styled-components';\r\nimport { getColor } from '../../themes';\r\n\r\nimport {\r\n  selectKeyboardKeys,\r\n  setActiveNote,\r\n} from './slice';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { MusicBox } from '../../components/musicbox';\r\nimport { \r\n  CompleteNote,\r\n  ScaleStatus \r\n} from '../../utils/music';\r\n\r\n\r\nexport const ScContainer = styled.div`\r\n  display:block;\r\n  text-align:center;\r\n`\r\n\r\nconst ScInstrument = styled.div`\r\n  padding: 1rem;\r\n  background-color: ${getColor('blue')};\r\n  border: 1rem solid ${getColor('white')};\r\n  border-radius: 1rem;\r\n  width: max-content;\r\n  margin: auto;\r\n`\r\n\r\ntype ScKeyboardKeyProps = {\r\n  scaleStatus: ScaleStatus\r\n}\r\n\r\nexport const ScKeyboardBaseKey = styled.div<ScKeyboardKeyProps>`\r\n  ${p => p.scaleStatus === 'root' && css`\r\n    border: .5rem solid ${getColor('red')};\r\n  `}\r\n\r\n  ${p => p.scaleStatus === 'scale' && css`\r\n    border: .5rem dashed ${getColor('red')};\r\n  `}\r\n`\r\n\r\nexport const ScKeyboardKey = styled(ScKeyboardBaseKey)`\r\n  position:relative;\r\n  display:inline-block;\r\n  width:4rem;\r\n  height:13rem;\r\n  margin-left: .25rem;\r\n  margin-right: .25rem;\r\n  background-color: ${getColor('white')};\r\n  cursor: pointer;\r\n\r\n  &:hover{\r\n    background-color: ${getColor('green')};\r\n  }\r\n  \r\n  span{\r\n    position:absolute;\r\n    bottom:.5rem;\r\n    left:50%;\r\n    transform: translateX(-50%);\r\n  }\r\n`\r\n\r\ntype ScAccidentalKeyboardKeyProps = {\r\n  keyStyle: boolean\r\n}\r\n\r\nexport const ScAccidentalKeyboardKey = styled(ScKeyboardBaseKey)<ScAccidentalKeyboardKeyProps>`\r\n  position:absolute;\r\n  display:inline-block;\r\n  z-index:1;\r\n  width:3rem;\r\n  height:7rem;  \r\n  margin-left:-1.5rem;\r\n  \r\n  ${p => p.keyStyle ? css`\r\n    background-color: ${getColor('black')};\r\n  ` : css`\r\n    background-color: ${getColor('grey_light')};\r\n  `}\r\n  \r\n  color: ${getColor('white')};\r\n  cursor: pointer;\r\n  box-shadow: .25rem .25rem .5rem .1rem ${getColor('blue')};\r\n\r\n  &:hover{\r\n    background-color: ${getColor('green')};\r\n    box-shadow: .5rem .5rem .5rem .1rem ${getColor('blue')};\r\n  }\r\n\r\n  span{\r\n    font-size:1rem;\r\n    position:absolute;\r\n    bottom:.5rem;\r\n    left:50%;\r\n    transform: translateX(-50%);\r\n  }\r\n`\r\n\r\nexport function Instrument() {\r\n  const keyboardKeys = useAppSelector(selectKeyboardKeys);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onClick = (e:any, noteObj:CompleteNote) => {\r\n    if(e.ctrlKey){\r\n      dispatch(setActiveNote(noteObj.octaveNote))\r\n    }\r\n\r\n    // @ts-ignore;\r\n    global.globalMidiHandler && global.globalMidiHandler([noteObj.midiNote]);\r\n  }\r\n\r\n  return (\r\n    <ScContainer>\r\n      <MusicBox midiInstrument={'piano'} volume={1} />\r\n      <ScInstrument>\r\n        {keyboardKeys.map(noteObj => {\r\n          if(noteObj.type === 'accidental'){\r\n            return (\r\n              <ScAccidentalKeyboardKey \r\n                key={noteObj.idx}\r\n                onClick={e => onClick(e, noteObj)}\r\n                keyStyle={noteObj.keyStyle}\r\n                scaleStatus={noteObj.scaleStatus}\r\n              >\r\n                <span>{noteObj.note}</span>\r\n              </ScAccidentalKeyboardKey>\r\n            );\r\n          }else{\r\n            return (\r\n              <ScKeyboardKey\r\n                key={noteObj.idx}\r\n                scaleStatus={noteObj.scaleStatus}\r\n                onClick={e => onClick(e, noteObj)}\r\n              >\r\n                <span>{noteObj.note}</span>\r\n              </ScKeyboardKey>\r\n            );\r\n          }\r\n        })}\r\n      </ScInstrument>\r\n    </ScContainer>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\n// @ts-ignore\r\nimport MIDISounds from 'midi-sounds-react';\r\n\r\nimport midiDataJSON from './mididata.js';\r\n\r\ntype midiInstrumentData = {\r\n  defaultInstrument: string,\r\n  instruments: {\r\n    [instrumentId: string]: {\r\n      midiId: number,\r\n      title: string\r\n    }\r\n  }\r\n}\r\nconst MIDI_INSTRUMENT_DATA = midiDataJSON as midiInstrumentData;\r\n\r\nconst findInstrument = (instrumentId?: string) => {\r\n  if(!instrumentId){\r\n    instrumentId = MIDI_INSTRUMENT_DATA.defaultInstrument;\r\n  }\r\n  return { ...MIDI_INSTRUMENT_DATA.instruments[instrumentId], id: instrumentId }\r\n}\r\n\r\nlet midiSounds: any;\r\nconst playMidiNotes = (notes: number[], midiId: number) => {\r\n  midiSounds.playChordNow(midiId, notes, 2.5);\r\n}\r\n\r\ntype Props = {\r\n  midiInstrument?: string,\r\n  volume: number\r\n}\r\nexport function MusicBox({ midiInstrument, volume }: Props) {\r\n  useEffect(() => {\r\n    const foundInstrument = findInstrument(midiInstrument);\r\n    midiSounds.cacheInstrument(foundInstrument.midiId);\r\n\r\n    (global as any).globalMidiHandler = (notes: number[]) => playMidiNotes(notes, foundInstrument.midiId);\r\n  }, [midiInstrument, volume])\r\n\r\n  return (\r\n    <div style={{'display':'none'}}>\r\n      <MIDISounds ref={(ref: any) => (midiSounds = ref)} appElementName=\"root\"  />\r\n    </div>\r\n  );\r\n}\r\n","const MIDI_DATA = {\n  \"defaultInstrument\": \"piano\",\n  \"instruments\":{\n    \"piano\": {\n      \"midiId\": 5,\n      \"title\": \"Piano\"\n    },\n    \"starfield\": {\n      \"midiId\": 62,\n      \"title\": \"Starfield\"\n    }\n  }\n};\n\nexport default MIDI_DATA;","import styled, { css } from 'styled-components';\r\nimport { getColor } from '../../themes';\r\n\r\nimport {\r\n  getActiveNote,\r\n  getActiveScale,\r\n  selectAllMajorScales,\r\n  setActiveScale\r\n} from './slice';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\n\r\nexport const ScContainer = styled.div`\r\n  background-color: ${getColor('purple')};\r\n  display:inline-block;\r\n\r\n  ul{\r\n    list-style:none;\r\n  }\r\n`\r\n\r\nexport const ScScaleNote = styled.li`\r\n  display:inline-block;\r\n  list-style:none;\r\n  margin:.5rem;\r\n`\r\n\r\nexport const ScScaleGroup = styled.div`\r\n  text-align:left;\r\n`\r\ntype ScScaleLabelProps = {\r\n  isActive: boolean\r\n}\r\nexport const ScScaleLabel = styled.p<ScScaleLabelProps>`\r\n  font-weight: bold;\r\n  cursor:pointer;\r\n  &:hover{\r\n    color:white;\r\n  }\r\n\r\n  ${p => p.isActive && css`\r\n    color: ${getColor('green')}\r\n  `}\r\n`\r\n\r\nexport function ScaleGroups() {\r\n  const allScales = useAppSelector(selectAllMajorScales);\r\n  const activeScale = useAppSelector(getActiveScale);\r\n  const activeNote = useAppSelector(getActiveNote);\r\n  const dispatch = useAppDispatch();\r\n  if(!allScales) return null;\r\n\r\n  const onClick = (e:any, clickedId:string) => {\r\n    dispatch(setActiveScale(clickedId));\r\n  }\r\n\r\n  return (\r\n    <ScContainer>\r\n      {allScales.map((scaleObj, idx) => (\r\n        <ScScaleGroup key={scaleObj.id}>\r\n          <ScScaleLabel\r\n            isActive={scaleObj.id === activeScale}\r\n            onClick={e => onClick(e, scaleObj.id)}\r\n          >\r\n            {`${activeNote?.split('-')[0]} ${scaleObj.label}:`}\r\n          </ScScaleLabel>\r\n          <ul>\r\n            {scaleObj.octaveNotes.map(octaveNote => (\r\n              <ScScaleNote key={octaveNote}>\r\n                <span>{octaveNote.split('-')[0]}</span>\r\n              </ScScaleNote>\r\n            ))}\r\n          </ul>\r\n        </ScScaleGroup>\r\n      ))}\r\n    </ScContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\n\r\nimport {\r\n  getActiveNote\r\n} from './slice';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { ScaleGroups } from './scalegroups';\r\n\r\nexport const ScContainer = styled.div`\r\n  text-align:left;\r\n  display:inline-block;\r\n  padding: 0rem 2rem;\r\n\r\n  ul{\r\n    list-style:none;\r\n  }\r\n\r\n\r\n  >div{\r\n    margin:1rem;\r\n  }\r\n`\r\nexport const ScInstructions = styled.div`\r\n  color: ${getColor('grey_light')};\r\n`\r\n\r\nexport const ScScales = styled.div`\r\n  background-color: ${getColor('purple')};\r\n  padding: 1rem 2rem;\r\n  \r\n  >h4{\r\n    text-align:center;\r\n  }\r\n`\r\n\r\nexport function Scales() {\r\n  const activeNote = useAppSelector(getActiveNote);\r\n  if(!activeNote) return null;\r\n\r\n  return (\r\n    <ScContainer>\r\n      <ScScales>\r\n        <p>{`key: ${activeNote.split('-')[0]}`}</p>\r\n        <p>{`root note: ${activeNote}`}</p>\r\n      </ScScales>\r\n      <ScScales>\r\n        <h4>{'scales'}</h4>\r\n        <p>{'click a scale name to toggle it on/off'}</p>\r\n        <ScaleGroups />\r\n      </ScScales>\r\n    </ScContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\nimport { Instrument } from './instrument';\r\nimport { Scales } from './scales';\r\n\r\nexport const ScContainer = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  bottom:0;\r\n  right:0;\r\n  background-color: ${getColor('grey')};\r\n  z-index:-1;\r\n  padding-top:5rem;\r\n  \r\n  text-align:center;\r\n\r\n  >h1{\r\n    color: ${getColor('green')};\r\n  }\r\n\r\n  >p{\r\n    color: ${getColor('grey_light')};\r\n    margin-bottom:1rem;\r\n  }\r\n`\r\n\r\nexport function Keyboard() {\r\n  return (\r\n    <ScContainer>\r\n      <h1>{'Altered Chromatic.'}</h1>\r\n      <p>{'ctrl + click to set the key & root note'}</p>\r\n      <Instrument />\r\n      <Scales />\r\n    </ScContainer>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { getColor } from '../../themes';\r\n\r\nexport const ScContainer = styled.div`\r\n  color: ${getColor('green')};\r\n  text-align:center;\r\n  margin-top:5rem;\r\n\r\n  >p{\r\n    color: ${getColor('red')};\r\n  }\r\n`\r\n\r\nexport function About() {\r\n  return (\r\n    <ScContainer>\r\n      <h2>{`I'll explain this soon.`}</h2>\r\n      <p>{`Next feature: play midi sounds`}</p>\r\n    </ScContainer>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { Keyboard } from '../../scenes/keyboard';\r\nimport { About } from '../../scenes/about';\r\nimport { getColor } from '../../themes/';\r\nimport { HashRouter, Route, Routes, Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nexport const GroupContainer = styled.div`\r\n  background-color: ${getColor('blue')};\r\n  border: 1rem solid ${getColor('white')};\r\n  border-radius: 5rem;\r\n  margin: 3rem;\r\n  padding: 2rem 3.3rem;\r\n`;\r\n\r\nexport const ScHeader = styled.div`\r\n  position:fixed;\r\n  top:0;\r\n  left:0;\r\n  transition: top .5s ease-in-out;\r\n\r\n  width: 100%;\r\n  height:10rem;\r\n  border-bottom:.5rem solid ${getColor('blue')};\r\n  color:white;\r\n  z-index:1;\r\n  background-color:black;\r\n\r\n  &.collapsed{\r\n    top:-8rem;\r\n    transition: top .5s ease-in-out;\r\n  }\r\n\r\n  >.link-button{\r\n    color:white;\r\n    display:inline-block;\r\n    vertical-align:middle;\r\n    margin:1.4rem 1.8rem;\r\n    transition: color .5s ease-in;\r\n    &:hover{\r\n      color: ${getColor('yellow')};\r\n      transition: color .2s ease-out;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ScStage = styled.div`\r\n  position:absolute;\r\n  left:0;\r\n  top:0;\r\n  right:0;\r\n  bottom:0;\r\n  padding-top:5rem;\r\n  z-index:-1;\r\n`\r\n\r\nexport const ScCopyright = styled.a`\r\n  position:absolute;\r\n  right:1rem;\r\n  bottom:.5rem;\r\n  color: ${getColor('green')};\r\n  font-size:2rem;\r\n\r\n  font-size:2rem;\r\n  color: ${getColor('blue')};\r\n  &:visited{\r\n    color: ${getColor('blue')};\r\n  }\r\n\r\n  &:hover{\r\n    color: ${getColor('yellow')};\r\n  }\r\n`\r\n\r\nfunction Main() {\r\n  const [ collapsed, setCollapsed ] = useState(true);\r\n  const pages = [\r\n    {\r\n      route: '/',\r\n      text: 'Keyboard',\r\n      element: <Keyboard/>\r\n    },\r\n    {\r\n      route: '/about',\r\n      text: 'About',\r\n      element: <About/>\r\n    }\r\n  ]\r\n  \r\n  return (\r\n    <HashRouter>\r\n      <ScHeader className={ collapsed ? 'collapsed' : ''} onClick={() => setCollapsed(!collapsed)}>\r\n        {pages.map((p, i) => (\r\n          <Link key={i} to={p.route} className=\"link-button\">\r\n            <h2>{p.text}</h2>\r\n          </Link>\r\n        ))}\r\n      </ScHeader>\r\n      <ScStage>\r\n        <Routes>\r\n          {pages.map((p, i) => (\r\n            <Route key={i} path={p.route} element={p.element} />\r\n          ))}\r\n        </Routes>\r\n        <ScCopyright href=\"http://thomasyancey.com\" target=\"_blank\">{'©Tom Yancey, 2022'}</ScCopyright>\r\n      </ScStage>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise<{ data: number }>((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState, AppThunk } from '../../app/store';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nexport interface CounterState {\r\n  value: number;\r\n  status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount: number) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount: number): AppThunk => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../examples/counter/counterSlice';\r\nimport keyboardReducer from '../scenes/keyboard/slice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    keyboard: keyboardReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Main from './scenes/main';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './themes/fonts.css';\r\nimport GlobalStyle from './themes/';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Main />\r\n      <GlobalStyle />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","\r\nexport type NoteType = 'normal' | 'accidental';\r\nexport type NoteName = 'A' | 'A#' | 'B' | 'B#' | 'C' | 'C#' | 'D' | 'D#' | 'E' | 'E#' | 'F' | 'F#';\r\n// export type ScaleKey = 'ionian' | 'dorian' | 'phyrgian' | 'lydian' | 'mixolydian' | 'aeolian' | 'locrian';\r\n\r\nexport type ScaleStatus = 'root' | 'scale' | 'inactive';\r\nexport type CompleteNote = {\r\n  note: NoteName,\r\n  octaveNote: string,\r\n  keyStyle: boolean,\r\n  scaleStatus: ScaleStatus,\r\n  type: NoteType,\r\n  idx: number,\r\n  midiNote: number,\r\n}\r\n\r\nexport type ScaleDefs = {\r\n  [key: string]: ScaleDef\r\n}\r\n\r\nexport type ScaleDef = {\r\n  label: string,\r\n  intervals: number[]\r\n}\r\n\r\nexport type ScaleObj = {\r\n  id: string,\r\n  label: string,\r\n  octaveNotes: string[]\r\n}\r\n\r\nexport const NOTES: NoteName[] = [ 'A', 'A#', 'B', 'B#', 'C', 'C#', 'D', 'D#', 'E', 'E#', 'F', 'F#' ];\r\nexport const SPECIAL_ACCIDENTALS: NoteName[] = [ 'A#', 'C#', 'D#' ];\r\nexport const MIDI_NOTE_REF = {\r\n  octaveNote: 'A-4',\r\n  code: 60\r\n};\r\n\r\nexport const SCALES: ScaleDefs = {\r\n  'ionian': {\r\n    label: 'Ionian (Major)',\r\n    intervals: [2,2,1,2,2,2,1]\r\n  } as ScaleDef,\r\n  'dorian': {\r\n    label: 'Dorian',\r\n    intervals: [2,1,2,2,2,1,2]\r\n  } as ScaleDef,\r\n  'phyrgian': {\r\n    label: 'Phyrgian',\r\n    intervals: [1,2,2,2,1,2,2]\r\n  } as ScaleDef,\r\n  'lydian': {\r\n    label: 'Lydian',\r\n    intervals: [2,2,2,1,2,2,1]\r\n  } as ScaleDef,\r\n  'mixolydian': {\r\n    label: 'Mixolydian',\r\n    intervals: [2,2,1,2,2,1,2]\r\n  } as ScaleDef,\r\n  'aeolian': {\r\n    label: 'Aeolian (Minor)',\r\n    intervals: [2,1,2,2,1,2,2]\r\n  } as ScaleDef,\r\n  'locrian': {\r\n    label: 'Locrian',\r\n    intervals: [1,2,2,1,2,2,2]\r\n  } as ScaleDef\r\n};\r\n\r\nexport const rotateArray = (array: any[], toIdx: number) => {\r\n  return array.map((_, idx) => array[(idx + toIdx) % array.length]);\r\n}\r\n\r\nexport const getArrayValueAtRelativeIndex = (array: any[], idx: number) => array[idx % array.length];\r\n\r\nexport const getNotesInScale = (rootNote: string, scaleKey: string, wrapRootNote = false) => {\r\n  const noteIdx = NOTES.findIndex(n => n === rootNote);\r\n  const scale = SCALES[scaleKey];\r\n  if(noteIdx === -1) {\r\n    console.error(`invalid note provided \"${rootNote}\"`)\r\n    return [];\r\n  };\r\n  if(!scale){\r\n    console.error(`invalid scale provided \"${scaleKey}\"`)\r\n    return [];\r\n  };\r\n\r\n  let curIdx = noteIdx;\r\n  const scaleNotes = scale.intervals.map((interval, idx) => {\r\n    const note = getArrayValueAtRelativeIndex(NOTES, curIdx);\r\n    curIdx += interval;\r\n    return note\r\n  });\r\n\r\n  return !wrapRootNote ? scaleNotes : [...scaleNotes, scaleNotes[0]];\r\n}\r\n\r\n/*\r\n  convert an explicit sequence of asecending notes into octave notes, constrained by octave\r\n  notes received could be (& will usually be) fewer than provided, depending on how the octaves are clamped\r\n\r\n  example: ([ 'F', 'A' ], 1, 2) => [ 'F-1', 'A-2', 'F-2' ]\r\n*/\r\nexport const transformNotesToOctaveNotes = (noteNames: NoteName[], minOctave = 0, maxOctave = 9) => {\r\n  let octaveNotes = [];\r\n  let lastNoteIdx = NOTES.findIndex(n => n === noteNames[0]); // 0 for A\r\n  let curOctave = minOctave; \r\n\r\n  while(curOctave <= maxOctave){\r\n    for(let i = 0; i < noteNames.length; i++){\r\n      const thisNoteIdx = NOTES.findIndex(nn => nn === noteNames[i]);\r\n      if(thisNoteIdx < lastNoteIdx){\r\n        curOctave++;\r\n        if(curOctave > maxOctave) break;\r\n      }\r\n      lastNoteIdx = thisNoteIdx;\r\n      octaveNotes.push(`${noteNames[i]}-${curOctave}`);\r\n    }\r\n  }\r\n\r\n  return octaveNotes;\r\n}\r\n\r\n/*\r\n  convert an explicit sequence of asecending notes into octave notes, starting from an octave\r\n  notes received should be the same length\r\n\r\n  example: ([ 'F', 'A' ], 2) => [ 'F-2', 'A-3' ]\r\n*/\r\nexport const transformScaleNotesToOctaveNotes = (scaleNoteNames: NoteName[], startOctave: number) => {\r\n  let lastNoteIdx = NOTES.findIndex(n => n === scaleNoteNames[0]); // 0 for A\r\n  let curOctave = startOctave; \r\n\r\n  return scaleNoteNames.map(snn => {\r\n    const thisNoteIdx = NOTES.findIndex(nn => nn === snn);\r\n    if(thisNoteIdx < lastNoteIdx){\r\n      curOctave++;\r\n    }\r\n    lastNoteIdx = thisNoteIdx;\r\n\r\n    return `${snn}-${curOctave}`;\r\n  });\r\n}\r\n\r\n/*\r\n  the good good, provide any note, scale, get the octaveNotes back to play\r\n\r\n  example: ('A-1', 'ionian', true) => ['A-1','B-1','C-1','C#-1','D#-1','E#-1','F#-1','A-2']\r\n*/\r\nexport const getOctaveNotesInScale = (rootOctaveNote: string, scaleKey: string, wrapRootNote = false) => {\r\n  const notePieces = rootOctaveNote.split('-');\r\n  const scaleNotes = getNotesInScale(notePieces[0], scaleKey, wrapRootNote);\r\n\r\n  return transformScaleNotesToOctaveNotes(scaleNotes, parseInt(notePieces[1]));\r\n}\r\n\r\nexport const getScaleObject = (rootOctaveNote: string, scaleKey: string): ScaleObj => {\r\n  const scaleDef = SCALES[scaleKey];\r\n\r\n  return {\r\n    id: scaleKey,\r\n    label: scaleDef.label,\r\n    octaveNotes: getOctaveNotesInScale(rootOctaveNote, scaleKey, true)\r\n  }\r\n}\r\n\r\n/*\r\n  \"what are all the chromatic notes between A and B?\" - ex, making piano keys\r\n\r\n  example ('F-2', 'B#-3') => ['F-2','F#-2','A-3','A#-3','B-3','B#-3']\r\n*/\r\nexport const getAllOctaveNotesBetween = (startOctaveNote: string, endOctaveNote: string) => {\r\n  const startPieces = startOctaveNote.split('-');\r\n  const endPieces = endOctaveNote.split('-');\r\n\r\n  const startNote = startPieces[0] as NoteName;\r\n  const startNoteIdx = NOTES.indexOf(startNote);\r\n  const allNotes = rotateArray(NOTES, startNoteIdx);\r\n\r\n  const octaveNotes = transformNotesToOctaveNotes(allNotes, parseInt(startPieces[1]), parseInt(endPieces[1]));\r\n  const indexOfEnd = octaveNotes.indexOf(endOctaveNote);\r\n  return octaveNotes.slice(0, indexOfEnd + 1);\r\n}\r\n\r\n// A-4, B-4, delta is -2 (A-4 < A#-4 < B-4)\r\nexport const getOctaveNoteDelta = (firstOctaveNote: string, secondOctaveNote: string) => {\r\n  const firstPieces = firstOctaveNote.split('-');\r\n  const secondPieces = secondOctaveNote.split('-');\r\n\r\n  const firstIdx = NOTES.indexOf(firstPieces[0] as NoteName);\r\n  const firstOctave = parseInt(firstPieces[1]);\r\n  const secondIdx = NOTES.indexOf(secondPieces[0] as NoteName);\r\n  const secondOctave = parseInt(secondPieces[1]);\r\n\r\n  const octaveChange = (secondOctave - firstOctave) * NOTES.length;\r\n  const idxChange = secondIdx - firstIdx;\r\n  const noteChange = octaveChange + idxChange;\r\n\r\n  return noteChange;\r\n}\r\n\r\n// traditionally, C4 == 60 ... in this wacky world A4 == 60\r\nexport const convertOctaveNoteToMidiId = (octaveNote:string) => {\r\n  const delta = getOctaveNoteDelta(MIDI_NOTE_REF.octaveNote, octaveNote);\r\n  return MIDI_NOTE_REF.code + delta;\r\n}","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { CompleteNote, NoteName, ScaleObj, SCALES, ScaleStatus, SPECIAL_ACCIDENTALS, getScaleObject, getAllOctaveNotesBetween, convertOctaveNoteToMidiId } from '../../utils/music';\r\n\r\nexport interface KeyboardState {\r\n  activeNote: string | null;\r\n  activeScale: string | null;\r\n}\r\n\r\nconst initialState: KeyboardState = {\r\n  activeNote: null,\r\n  activeScale: null,\r\n};\r\n\r\nconst PIANO_RANGE = ['A-4', 'C-6'];\r\n\r\nexport const keyboardSlice = createSlice({\r\n  name: 'keyboard',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setActiveNote: (state, action: PayloadAction<string>) => {\r\n      state.activeNote = action.payload;\r\n    },\r\n    setActiveScale: (state, action: PayloadAction<string>) => {\r\n      if(state.activeScale === action.payload){\r\n        state.activeScale = null;\r\n      }else{\r\n        state.activeScale = action.payload;\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { setActiveNote, setActiveScale } = keyboardSlice.actions;\r\n\r\nexport const getActiveNote = (state: RootState) => state.keyboard.activeNote;\r\nexport const getActiveScale = (state: RootState) => state.keyboard.activeScale;\r\n\r\nexport const selectActiveScale = createSelector(\r\n  [getActiveScale, getActiveNote],\r\n  (activeScale, activeNote): ScaleObj | null => {\r\n    if(!activeNote || !activeScale) return null;\r\n\r\n    return getScaleObject(activeNote, activeScale);\r\n  }\r\n);\r\n\r\nexport const selectAllMajorScales = createSelector(\r\n  [getActiveNote],\r\n  (activeNote): ScaleObj[] | null => {\r\n    if(!activeNote) return null;\r\n\r\n    return Object.keys(SCALES).map(scaleKey => {\r\n      return getScaleObject(activeNote, scaleKey)\r\n    });\r\n  }\r\n);\r\n\r\nexport const getScaleStatus = (octaveNote: string, scaleNotes: string[]): ScaleStatus => {\r\n  if(!scaleNotes.includes(octaveNote)) return 'inactive';\r\n\r\n  if(octaveNote === scaleNotes[0] || octaveNote === scaleNotes[scaleNotes.length - 1]){\r\n    return 'root';\r\n  }\r\n  return 'scale';\r\n}\r\n\r\nexport const selectKeyboardKeys = createSelector(\r\n  [selectActiveScale],\r\n  (activeScaleObj): CompleteNote[] => {\r\n\r\n    const octaveNotes = getAllOctaveNotesBetween(PIANO_RANGE[0], PIANO_RANGE[1]);\r\n    return octaveNotes.map((octaveNote, idx) => {\r\n      const noteLabel = octaveNote.split('-')[0] as NoteName;\r\n      return {\r\n        note: noteLabel,\r\n        octaveNote: octaveNote,\r\n        keyStyle: SPECIAL_ACCIDENTALS.includes(noteLabel),\r\n        midiNote: convertOctaveNoteToMidiId(octaveNote),\r\n        scaleStatus: activeScaleObj ? getScaleStatus(octaveNote, activeScaleObj.octaveNotes) : 'inactive',\r\n        type: noteLabel.includes('#') ? 'accidental' : 'normal',\r\n        idx\r\n      };\r\n    })\r\n  }\r\n);\r\n\r\nexport default keyboardSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n"],"sourceRoot":""}